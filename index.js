// 1. Створення базового об'єкту "Book":
/*
 * Об'єкт: Book
 * Властивості:
 * ----------------------------------
 * | Властивість | Значення         |
 * |-------------|------------------|
 * | title       | "Загальна Книга" |
 * | author      | "Анонім"         |
 * | pages       | 0                |
 *
 * Функції:
 * ------------------------------------------------------------------------
 * | Функція    | Опис                                                    |
 * -----------------------------------------------------------------------
 * | read()     | Виводить повідомлення "Ви читаєте <title> від <author>" |
 */

const Book = {
    title: "Загальна Книга",
    author: "Анонім",
    pages: 0,
    read: function() {
      console.log(`Ви читаєте "${this.title}" від ${this.author}`);
    }
  };
  
// Створюємо об'єкт Book


console.log("Завдання: 1 ==============================");
// Виведення об'єкту "Book" в консоль
  console.log("Об'єкт: Book", Book);
  
  // Виведення прототипу об'єкту "Book" в консоль
  console.log("Прототип Об'єкту: Book", Object.getPrototypeOf(Book));
  
  // Виклик функції read об'єкту "Book"
  Book.read(); // Output: "Ви читаєте "Загальна Книга" від Анонім"
  

// 2. Наслідування від базового об'єкту Book

/*
 * Об'єкт: Novel
 * Властивості та функції наслідуються від об'єкта Book
 * Додаємо нову властивість
 *  | Властивість | Значення |
 *  |-------------|----------|
 *  | genre       | "Новела" |
 */
const Novel = Object.create(Book);

Novel.genre = "Новела";
// Створюємо об'єкт Novel, наслідуємо властивості і функції від об'єкта Book
// Додаємо властивість genre

console.log("Завдання: 2 ==============================");

console.log("Об'єкт: Novel", Novel);

console.log("Прототип Об'єкту: Novel", Object.getPrototypeOf(Novel));
// Виводимо в консоль Об'єкт: Novel

// Виводимо в консоль прототип Об'єкту: Novel

// 3. Створення нового об'єкту та зміна його прототипу

/*
 * Об'єкт: Biography
 * Властивості:
 * --------------------------------------
 * | Властивість | Значення             |
 * |-------------|----------------------|
 * | title       | "Загальна Біографія" |
 * | author      | "Біограф"            |
 * | pages       | 200                  |
 */

const Biography = {
    title: "Загальна Біографія",
    author: "Біограф",
    pages: 200,
  };
  
  Object.setPrototypeOf(Biography, Novel);
// Створюємо об'єкт Biography

// Змінемо прототип об'єкта Biography на Novel

console.log("Завдання: 3 ==============================");

console.log("Об'єкт: Biography", Biography);

console.log("Novel є прототипом Biography:", Object.getPrototypeOf(Biography) === Novel);
// Виводимо в консоль Об'єкт: Biography

// Перевіримо чи являється Novel прототипом Biography та виведемо в консоль

// 4. Інкапсуляція властивості та додання властивості
/*
 * Об'єкт: ScienceBook
 * Властивості та функції наслідуються від об'єкта Book
 * Також тут використовується інкапсуляція для створення властивості 'info', яка не може бути змінена напряму, а лише змінюється за допомогю гетера
 */

// Створюємо ScienceBook, наслідуємо властивості і функції від об'єкта Book

// Додаємо властивість 'info' за допомогою Object.defineProperty
// Зробимо щоб 'info' не можно було видалити або змінити, перевіримо і спробуємо присвоїти ій будь яке значення (це потрібно робити ззовні defineProperty),
// Отримаємо помилку Cannot assign to read only property 'info' of object '#<Object>'

// Далі створюємо сетер який присвоє властивості info значення яке отримує при виклику, помилку більше не отримуємо але при спробі вивести значення info отримуємо undefined

// Створимо гетер який буде нам повертати рядок: Про книгу <title>: <info>
// тепер все виводить коректно

// Заповнюємо об'єкт
// | Властивість | Значення             |
// |-------------|----------------------|
// | title       | "Фізика 101"         |
// | author      | "Альберт Ейнштейн"   |
// | info        | написана в 1915 році |

const ScienceBook = Object.create(Book);

Object.defineProperty(ScienceBook, 'info', {
  value: 'написана в 1915 році',
  writable: false,
  configurable: false, 
});

try {
  ScienceBook.info = 'new info'; 
} catch (error) {
  console.error(error.message);
}

Object.defineProperty(ScienceBook, 'setInfo', {
  set: function (newInfo) {
    this.info = newInfo;
  },
});

Object.defineProperty(ScienceBook, 'getFullInfo', {
  get: function () {
    return `Про книгу ${this.title}: ${this.info}`;
  },
});

ScienceBook.title = 'Фізика 101';
ScienceBook.author = 'Альберт Ейнштейн';

console.log("Властивість info:", ScienceBook.info);
console.log("Налаштування властивості info:", Object.getOwnPropertyDescriptor(ScienceBook, 'info'));


console.log("Завдання: 4 ==============================");
console.log(ScienceBook.getFullInfo);
// Виводимо в консоль властивість info

// Виводимо в консоль налаштування властивости info

// 5. Поліморфізм: створення нового об'єкта та перевизначення його методу
/*
 * Об'єкт: Textbook
 * Властивості та функції наслідуються від об'єкта ScienceBook
 * Метод read() перевизначено для демонстрації поліморфізму,
 * має виводити "Ви читаєте підручник "<title>" від <author>. <info>"
 */

//Створюємо Textbook та наслідуємо властивості з ScienceBook

// Перевизначаємо метод read(), відповідно з дописом вище

// Встановлюємо значення для Textbook
// | Властивість | Значення                   |
// |-------------|----------------------------|
// | title       | "Фізика у Вищій Школі"     |
// | author      | "Дж. Д. Джонс"             |

// Створюємо Textbook та наслідуємо властивості з ScienceBook
const Textbook = Object.create(ScienceBook);


Textbook.read = function () {
  console.log(`Ви читаєте підручник "${this.title}" від ${this.author}. ${this.info}`);
};

Textbook.title = 'Фізика у Вищій Школі';
Textbook.author = 'Дж. Д. Джонс';

console.log("Завдання: 5 ==============================");
Textbook.read();
// Викликаємо функцію read об'єкту Textbook

// 6. Абстракція: створення об'єкта з загальними властивостями
/*
 * Об'єкт: Media
 * Властивості:
 * --------------
 * | Властивість | Значення           |
 * |-------------|--------------------|
 * | format      | "Загальний Формат" |
 * | length      | 0                  |
 *
 * Функції:
 * ---------------------------------------------------------------------------------------------------------------
 * | Функція | Опис                                                                                              |
 * |---------|---------------------------------------------------------------------------------------------------|
 * | play()  | Виводить повідомлення "Зараз відтворюється медіа у форматі <format> з тривалістю <length> секунд" |
 */

// Створюємо об'єкт Media

/*
 * Об'єкт: Song
 * Властивості та функції наслідуються від об'єкта Media
 * Додаткові властивості: artist, title
 */

// Створюємо об'єкт Song, наслідуємо властивості і функції від об'єкта Media

// Встановлюємо додаткові властивості
// | Властивість | Значення               |
// |-------------|------------------------|
// | artist      | "Загальний Виконавець" |
// | title       | "Загальна Пісня"       |

const Media = {
    format: "Загальний Формат",
    length: 0,
    play() {
      console.log(`Зараз відтворюється медіа у форматі ${this.format} з тривалістю ${this.length} секунд`);
    },
  };
  

  const Song = Object.create(Media);
  
  Song.artist = "Загальний Виконавець";
  Song.title = "Загальна Пісня";

console.log("Завдання: 6 ==============================");
Song.play();
// Викликаємо функцію play об'єкту Song
